<?php

/**
 * Implements hook_views_api().
 */
function handle_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'handle') . '/views',
  );
}

/**
 * Implements hook_field_formatter_info().
 */
function handle_field_formatter_info() {
  return array(
    'exchange' => array(
      'label' => t('exchange Rates'),
      'field types' => array('number_decimal'),
    ),
  );
}

function handle_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element[0] = array();
  $cur_ar = array();
  $cur_ar = exchangeRates($items[0]['value']);
  switch ($display['type']) {
    // Override check plain
    case 'exchange':
     $element[0] = array('#markup' => ($cur_ar['val']).' '.$cur_ar['currency']);
    break;
  }  
  return $element;
}

/**
* function for exchange 
*/
function exchangeRates($price) {  
  if (isset($_COOKIE['Drupal_visitor_currency'])):
    $cur_id = $_COOKIE['Drupal_visitor_currency'];
  else:
    user_cookie_save(array('currency' => 1));
    $cur_id = 1;
  endif;  
  $query = db_select('currency', 'c');
  $query->fields('c', array('currency'));
  $query->fields('c', array('val'));
  $query->condition('c.id', $cur_id);
  $node = $query->execute()->fetchAll();  
  foreach ($node as $item) {
    $cur_name = $item->currency;
    $cur_coef = $item->val;
  }
  $conv_price = $price * $cur_coef; 
  return array('currency' => $cur_name, 'val' => round($conv_price, 2));
}
/**
*Implements hook_block_info
*block view count on shopping card
*/
function handle_block_info() {
  $blocks['custom_block'] = array(
    'info' => t('Custom block'),
    'cache' => DRUPAL_NO_CACHE,
  );
  $blocks['currency'] = array(
    'info' => t('Select currency'),
    'cache' => DRUPAL_NO_CACHE,
  );

  return $blocks;
}

function handle_block_view($delta = '') {
  $block = array();

  switch ($delta) {    
    case 'custom_block':
      $image = theme(
        'image', 
        array(
          'path' => drupal_get_path('theme', 'mythemes') . '/images/sc.png',
          'attributes' => array('id' => 'img-sc'),              
        )
      );
      $link = l('', '/ckeckout');
      $count = getCountProductsInUser();
      if ($count == 0):
        $count = t('Empty'); 
      endif;  
      $block['subject'] = t('Custom block');
      $block['content'] = array(
        '#theme' => 'cblock',
        '#image' => $image,
        '#cnum' => '('.$count.')',
        '#link' => $link,
      );
      break;
    case 'currency':
      if (isset($_COOKIE['Drupal_visitor_currency'])):
        $cur_id = $_COOKIE['Drupal_visitor_currency'];
      else:
        user_cookie_save(array('currency' => 1));
        $cur_id = 1;
      endif;  
      $query = db_select('currency', 'c');
      $query->fields('c', array('currency'));
      $query->fields('c', array('val'));
      $query->condition('c.id', $cur_id);
      $node = $query->execute()->fetchAll();  
      foreach ($node as $item) {
        $cur_name = $item->currency;
        $cur_coef = $item->val;
      }  
      $block['subject'] = t('Currency');
      $block['content'] = array(
        '#theme' => 'curblock',
        '#currency' => $cur_name,
        '#val' => $cur_coef.'/USD',
      );
    break;  

  }
  return $block;
}

function handle_theme() {
  $themes = array();

  $themes['cblock'] = array(
    'variables' => array(
      'image' => NULL,
      'cnum' => NULL,
      'link' => NULL,
    ),
    'template' => 'myblock',
  );
  $themes['curblock'] = array(
    'variables' => array(
      'currency' => NULL,
      'val' => NULL,
    ),
    'template' => 'curblock',
  );

  return $themes;
}

/**
*Implements hook_menu
*/
function handle_menu() {
  $items['ajax/handle/path/%'] = array(
    'page callback' => 'handle_ajax_callback',
    'page arguments' => array(3),
	  'access arguments' => array('buy products'),
    'type' => MENU_CALLBACK,
	  'delivery callback' => 'ajax_deliver',
  );
  $items['checkout'] = array(
    'title' => t('Checkout'),
	'page callback' => 'page_checkout',
	'page arguments' => array(),
    'menu_name' => 'main-menu',	
	'access arguments' => array('buy products'),
    'type' => MENU_NORMAL_ITEM, 	
	'options' => array('attributes' => array('class' => array('menu__link', 'checkout-class'))),
  );
  $items['my-orders'] = array(
    'title' => t('My Orders'),
	'page callback' => 'handle_myorders_callback',
	'page arguments' => array(),
	'access arguments' => array('auth'),
	'options' => array('attributes' => array('class' => array('my-orders-class'))),
  );
  $items['item-order/%'] = array(
    'title' => t('Item Order'),
	'page callback' => 'handle_item_order_callback',
	'page arguments' => array(1),
	'access arguments' => array('administer buy products'),
	'options' => array('attributes' => array('class' => array('item-order-class'))),
  );
 $items['item-order-view/%'] = array(
    'title' => t('Item Order View'),
	'page callback' => 'handle_item_order_view_callback',
	'page arguments' => array(1),
	'access arguments' => array('auth'),
	'options' => array('attributes' => array('class' => array('item-order-view-class'))),
  );
  $items['all-orders'] = array(
    'title' => t('All Orders'),
	'page callback' => 'handle_all_orders_callback',
	'page arguments' => array(),
	'access arguments' => array('administer buy products'),
	'options' => array('attributes' => array('class' => array('all-orders-class'))),
  );
  $items['currency'] = array(
    'title' => t('Select Currency'),
    'page callback' => 'handle_currency_callback',
    'page arguments' => array(),
    'access arguments' => array('buy products'),
    'options' => array('attributes' => array('class' => array('currency-class'))),
  );
  return $items;
}
function handle_currency_callback() {
  $build['form_currency'] = drupal_get_form('handle_currency_form');
  return $build;
}

function handle_currency_form($form, &$form_state) {
  $query = db_select('currency', 'c');
  $query->fields('c', array('id')); 
  $query->fields('c', array('currency')); 
  $query->fields('c', array('val')); 
  $cur = $query->execute()->fetchAll();
  foreach ($cur as $item) {
    $key = $item->id;
    $value = $item->currency;
    $dropdown_array[$key] = $value;
  }
  $items['select'] = array(
    '#type' => 'select', 
    '#title' => t('Select another currency'),
    '#options' => $dropdown_array,
  );
  $items['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Apply'),
    '#attributes' => array('id' => 'order_submit'),
  );  
  return $items;
}

function handle_currency_form_submit($form, &$form_state) {
  $cur_id = $form_state['values']['select'];
  user_cookie_save(array('currency'=>$cur_id));
  drupal_set_message('Your display cuurency is changed!');
}

/**
*This callback VIEW two table: first - order DOOR, Second - order Findings
*Without any forms 
*/
function handle_item_order_view_callback($cid) {
  $cur_ar = array();
  $door = array(
    t('Title products, Door'),
    t('Price'),
  );
  $findings = array(
    t('Title products, Findings'),
    t('Price'),
  );
  /** db select ** Doors*/
  $query = db_select('card', 'c');
  $query->innerJoin('node', 'n', 'c.nodeid = n.nid');
  $query->innerJoin('field_data_field_door_price', 'dp', 'n.nid = dp.entity_id');	  
  $query->condition('c.order_id', $cid);
  $query->fields('n', array('nid'));
  $query->fields('n', array('title'));
  $query->fields('dp', array('field_door_price_value'));
  $nodes = $query->execute()->fetchAll();
  /** db select ** Findings*/
  $query = db_select('card', 'c');
  $query->innerJoin('node', 'n', 'c.nodeid = n.nid');
  $query->innerJoin('field_data_field_price_findings', 'dp', 'n.nid = dp.entity_id');	  
  $query->condition('c.order_id', $cid);
  $query->fields('n', array('nid'));
  $query->fields('n', array('title'));
  $query->fields('dp', array('field_price_findings_value'));  
  $nodes_f = $query->execute()->fetchAll();
  $total = 0;

  foreach ($nodes as $node) {
    $cur_ar = exchangeRates($node->field_door_price_value);
    $rows[] = array(
    l($node->title, 'node/'.$node->nid),
      $cur_ar['val'].' '.$cur_ar['currency'],	  
    );
  $total = $total + $cur_ar['val'];
  }

  $total_f = 0;

  foreach ($nodes_f as $node) {
    $cur_ar = exchangeRates($node->field_price_findings_value);
    $rows_f[] = array(
    l($node->title, 'node/'.$node->nid),
    $cur_ar['val'].' '.$cur_ar['currency'],
    );
  $total_f = $total_f + $cur_ar['val'];
  } 

  $rows[] = array(t('Total, Door'), $total.' '.$cur_ar['currency']);
  $rows_f[] = array(t('Total, Findings'), $total_f.' '.$cur_ar['currency']);  

  $build['table_door'] = array(
    '#theme' => 'table',
    '#header' => $door,
    '#rows' => $rows,
  );

  $build['table_findings'] = array(
    '#theme' => 'table',
    '#header' => $findings,
    '#rows' => $rows_f,
  );

  $t_ord = $total + $total_f;
  
  $build['item'] = array(
    '#type' => 'item',
	  '#title' => t('TOTAL:').$t_ord.' '.$cur_ar['currency'],	
  );
  return $build;  
}

/**
*This callback VIEW two table: first - order DOOR, Second - order Findings
*With forms 
*/
function handle_item_order_callback($cid) {
  $cur_ar = array();
  $door = array(
    t('Title products, Door'),
    t('Price'),
  );
  $findings = array(
    t('Title products, Findings'),
    t('Price'),
  );
  /** db select ** Doors*/
  $query = db_select('card', 'c');
  $query->innerJoin('node', 'n', 'c.nodeid = n.nid');
  $query->innerJoin('field_data_field_door_price', 'dp', 'n.nid = dp.entity_id');	  
  $query->condition('c.order_id', $cid);
  $query->fields('n', array('nid'));
  $query->fields('n', array('title'));
  $query->fields('dp', array('field_door_price_value'));
  $nodes = $query->execute()->fetchAll();
  /** db select ** Findings*/
  $query = db_select('card', 'c');
  $query->innerJoin('node', 'n', 'c.nodeid = n.nid');
  $query->innerJoin('field_data_field_price_findings', 'dp', 'n.nid = dp.entity_id');	  
  $query->condition('c.order_id', $cid);
  $query->fields('n', array('nid'));
  $query->fields('n', array('title'));
  $query->fields('dp', array('field_price_findings_value'));  
  $nodes_f = $query->execute()->fetchAll();
  $total = 0;
  foreach ($nodes as $node) {
    $cur_ar = exchangeRates($node->field_door_price_value);
    $rows[] = array(
    l($node->title, 'node/'.$node->nid),
    $cur_ar['val'].' '.$cur_ar['currency'],	  
    );
  $total = $total + $cur_ar['val'];
  } 
  
  $total_f = 0;
  foreach ($nodes_f as $node) {
    $cur_ar = exchangeRates($node->field_price_findings_value);
    $rows_f[] = array(
    l($node->title, 'node/'.$node->nid),
    $cur_ar['val'].' '.$cur_ar['currency'],
    );
  $total_f = $total_f + $cur_ar['val'];
  }    
  $rows[] = array(t('Total, Door'), $total.' '.$cur_ar['currency']);
  $rows_f[] = array(t('Total, Findings'), $total_f.' '.$cur_ar['currency']);  
  $build['table_door'] = array(
    '#theme' => 'table',
    '#header' => $door,
    '#rows' => $rows,
  );
  $build['table_findings'] = array(
    '#theme' => 'table',
    '#header' => $findings,
    '#rows' => $rows_f,
  );
  $t_ord = $total + $total_f;
  
  $build['item'] = array(
    '#type' => 'item',
	'#title' => t('TOTAL:').$t_ord.' '.$cur_ar['currency'],	
  );
  $arg1 = $cid;
  $build['item_form_send'] = drupal_get_form ('order_send_form', $arg1);
  $build['item_form_canceled'] = drupal_get_form ('order_canceled_form', $arg1);
  return $build;
}

/**
*This callback VIEW all orders in shopp
*Include two submit: SEND and CANCEL 
*/
function handle_all_orders_callback() {
  $cur_ar = array();
  global $user;
  $uid = $user->uid;
  $my_orders = array(
    t('ID'),
    t('Your name'),
	  t('Your phone'),
	  t('Delivery'),
	  t('Date'),
	  t('State'),
	  t('Total'),
  );
  /** db select ** All Orders*/
  $query = db_select('order_t', 'o');
  $query->innerJoin('order_state', 'os', 'o.state = os.id');  
  $query->fields('o', array('ordid'));
  $query->fields('o', array('client_name'));
  $query->fields('o', array('client_phone'));
  $query->fields('o', array('del_point'));
  $query->fields('o', array('date_order'));
  $query->fields('os', array('state_name'));
  $query->fields('o', array('total'));
  $query->orderBy('ordid', 'DESC');
  $nodes = $query->execute()->fetchAll();
  if ($nodes == NULL):
    return t('There is not a single order!');
  endif;
  foreach ($nodes as $node) {
    $cur_ar = exchangeRates($node->total);
    $rows[] = array(
    l($node->ordid, 'item-order/'.$node->ordid),
    $node->client_name,
	  $node->client_phone,
	  $node->del_point,
	  $node->date_order,
	  $node->state_name,
	  $cur_ar['val'].' '.$cur_ar['currency'],
    );
  }
  $build['table_door'] = array(
    '#theme' => 'table',
    '#header' => $my_orders,
    '#rows' => $rows,
  );
  return $build;
}

/**
*This callback VIEW my orders in shopp
*Via user_id
*/
function handle_myorders_callback() {
  global $user;
  $uid = $user->uid;
  $my_orders = array(
    t('ID'),
    t('Your name'),
	  t('Your phone'),
	  t('Delivery'),
	  t('Date'),
	  t('State'),
	  t('Total'),
  );
  /** db select ** My Orders*/
  $query = db_select('order_t', 'o');
  $query->innerJoin('order_state', 'os', 'o.state = os.id');  
  $query->condition('o.uid', $uid);
  $query->fields('o', array('ordid'));
  $query->fields('o', array('client_name'));
  $query->fields('o', array('client_phone'));
  $query->fields('o', array('del_point'));
  $query->fields('o', array('date_order'));
  $query->fields('os', array('state_name'));
  $query->fields('o', array('total'));
  $query->orderBy('ordid', 'DESC');
  $nodes = $query->execute()->fetchAll();
  if ($nodes == NULL):
    return t('You have no orders!');
  endif; 
  foreach ($nodes as $node) {
    $cur_ar = exchangeRates($node->total);
    $rows[] = array(
    l($node->ordid, 'item-order-view/'.$node->ordid),
    $node->client_name,
	  $node->client_phone,
	  $node->del_point,
	  $node->date_order,
	  $node->state_name,
	  $cur_ar['val'].' '.$cur_ar['currency'],
    );
  }

  $build['table_door'] = array(
    '#theme' => 'table',
    '#header' => $my_orders,
    '#rows' => $rows,
  );

  return $build;
}

/**
*Implements hook_ajax_callback with AJAX technology
*Include two submit form: SEND and CANCEL 
*/
function handle_ajax_callback($n, $type = 'ajax') {
  global $user;
  $uid = $user->uid;
  $commands = array();
  if (($uid != 0) && ($uid > 0)):
    $id = db_insert('card')
      ->fields(array('nodeid' => $n,'huid' => 0 , 'uid' => $uid, 'date_add' => date("Y-m-d H:i:s", time()), 'state' => 0))
      ->execute();
  else:
    $huid = getHushUserId();
    $id = db_insert('card')
      ->fields(array('nodeid' => $n,'uid' => 0 ,'huid' => $huid, 'date_add' => date("Y-m-d H:i:s", time()), 'state' => 0))
      ->execute();	
  endif;
  $countProducts = getCountProductsInUser();
  $commands[] = ajax_command_replace('.checkout-class', '<a href="/checkout" class="menu__link checkout-class">Checkout('.$countProducts.')</a>');
  $commands[] = ajax_command_replace('.count-products', '<span class="count-products">('.$countProducts.')</span>');
  return array('#type' => 'ajax', '#commands' => $commands);;
}
/**
*hook_menu -> checkout -> page callback
*/
function page_checkout() {
  global $user;
  $uid = $user->uid;
  $cur_ar = array();
  $door = array(
    t('Title products, Door'),
    t('Price'),
  );
  $findings = array(
    t('Title products, Findings'),
    t('Price'),
  );
  if (($uid != 0) && ($uid > 0)):
    /** db select ** Doors*/
    $query = db_select('card', 'c');
    $query->innerJoin('node', 'n', 'c.nodeid = n.nid');
    $query->innerJoin('field_data_field_door_price', 'dp', 'n.nid = dp.entity_id');	  
    $query->condition('c.uid', $uid);
    $query->condition('c.state', 0);
    $query->fields('n', array('nid'));
    $query->fields('n', array('title'));
    $query->fields('dp', array('field_door_price_value'));
    $nodes = $query->execute()->fetchAll();
    /** db select ** Findings*/
    $query = db_select('card', 'c');
    $query->innerJoin('node', 'n', 'c.nodeid = n.nid');
    $query->innerJoin('field_data_field_price_findings', 'dp', 'n.nid = dp.entity_id');	  
    $query->condition('c.uid', $uid);
    $query->condition('c.state', 0);
    $query->fields('n', array('nid'));
    $query->fields('n', array('title'));
    $query->fields('dp', array('field_price_findings_value'));
    $nodes_f = $query->execute()->fetchAll();
    /***/
  else:
    /** db select ** Doors*/
    $huid = getHushUserId();
    $query = db_select('card', 'c');
    $query->innerJoin('node', 'n', 'c.nodeid = n.nid');
    $query->innerJoin('field_data_field_door_price', 'dp', 'n.nid = dp.entity_id');	  
    $query->condition('c.huid', $huid);
    $query->condition('c.state', 0);
    $query->fields('n', array('nid'));
    $query->fields('n', array('title'));
    $query->fields('dp', array('field_door_price_value'));
    $nodes = $query->execute()->fetchAll();
    /** db select ** Findings*/
    $query = db_select('card', 'c');
    $query->innerJoin('node', 'n', 'c.nodeid = n.nid');
    $query->innerJoin('field_data_field_price_findings', 'dp', 'n.nid = dp.entity_id');	  
    $query->condition('c.huid', $huid);
    $query->condition('c.state', 0);
    $query->fields('n', array('nid'));
    $query->fields('n', array('title'));
    $query->fields('dp', array('field_price_findings_value'));
    $nodes_f = $query->execute()->fetchAll();  
  endif;
  if ($nodes == NULL && $nodes_f == NULL):
    return t('In your shopping cart there are no products!');
  endif;
  
  $total = 0;
  $total_dolar = 0;

  foreach ($nodes as $node) {
    $cur_ar = exchangeRates($node->field_door_price_value);
    $rows[] = array(
    l($node->title, 'node/'.$node->nid),
      $cur_ar['val'].' '.$cur_ar['currency'],	  
    );
    $total = $total + $cur_ar['val'].' '.$cur_ar['currency'];
    $total_dolar = $total_dolar + $node->field_door_price_value;
  } 

  $total_f = 0;
  $total_dolar_f = 0;

  foreach ($nodes_f as $node) {
    $cur_ar = exchangeRates($node->field_price_findings_value);
    $rows_f[] = array(
    l($node->title, 'node/'.$node->nid),
    $cur_ar['val'].' '.$cur_ar['currency'],
    );
    $total_f = $total_f + $cur_ar['val'].' '.$cur_ar['currency'];
    $total_dolar_f = $total_dolar_f + $node->field_price_findings_value;
  } 

  $rows[] = array(t('Total, Door'), $total);
  $rows_f[] = array(t('Total, Findings'), $total_f); 

  $build['table_door'] = array(
    '#theme' => 'table',
    '#header' => $door,
    '#rows' => $rows,
  );

  $build['table_findings'] = array(
    '#theme' => 'table',
    '#header' => $findings,
    '#rows' => $rows_f,
  );

  $t_ord = $total + $total_f;
  $t_ord_dolar = $total_dolar + $total_dolar_f;
  $cur_ar = exchangeRates($t_ord);

  $build['item'] = array(
    '#type' => 'item',
	  '#title' => t('TOTAL:') . $t_ord . ' ' . $cur_ar['currency'],	
  );
  $arg1 = $t_ord_dolar;
  $build['clear'] = drupal_get_form('clear_card_form');
  $build['order'] = drupal_get_form('order_form', $arg1); 
  $build['order']['#attributes'] = array('id' => 'form_order'); 
  return $build; 
}

/** Form for order
*/
function order_form($form, $form_state, $arg1){
  $form['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Your Name'),
    '#size' => 50,
	  '#required' => TRUE,
    '#attributes' => array('id' => 'order_name'),
  );
  $form['phone'] = array(
    '#type' => 'textfield',
    '#title' => t('Your contact phone'),
    '#size' => 50,
	  '#required' => TRUE,
	  '#attributes' => array('id' => 'order_phone'),
  );
  $form['del_point'] = array(
    '#type' => 'textfield',
    '#title' => t('Please, enter the delivery point'),
    '#size' => 50,
	  '#required' => TRUE,
    '#attributes' => array('id' => 'order_del_point'),
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Order'),
    '#attributes' => array('id' => 'order_submit'),
  );
  return $form;
}

function order_form_submit($form_state, $arg1) {
  $total = $arg1['build_info']['args'][0];
  $name = $form_state['name']['#value'];
  $phone = $form_state['phone']['#value'];
  $deliver = $form_state['del_point']['#value'];
  /** insert to database */
  global $user;
  $uid = $user->uid;
  if (($uid != 0) && ($uid > 0)):
    $lastid = db_insert('order_t')
    ->fields(array(
      'client_name' => $name, 
      'uid' => $uid, 
      'huid' => 0,
      'date_order' => date("Y-m-d H:i:s", time()), 
      'client_phone' => $phone,
      'del_point' => $deliver,
      'state' => 2,
      'total' => $total,
      )
    )
    ->execute();
    /** update all state in products */
  $result = db_update('card')
    ->fields(array('state' => 1, 'order_id' => $lastid))
    ->condition('uid', $uid)
    ->condition('state', 0)
    ->execute();
  drupal_set_message('Your order in process! Wait phone call from our consult!');
  else:
  $huid = getHushUserId();
    $lastid = db_insert('order_t')
    ->fields(array(
      'client_name' => $name, 
      'huid' => $huid,
      'uid' => 0,   
      'date_order' => date("Y-m-d H:i:s", time()), 
      'client_phone' => $phone,
      'del_point' => $deliver,
      'state' => 2,
      'total' => $total,
    )
    )
    ->execute();
  /** update all state in products */
  $result = db_update('card')
    ->fields(array('state' => 1, 'order_id' => $lastid))
    ->condition('uid', $uid)
    ->condition('state', 0)
    ->execute();
  drupal_set_message(t('Your order in process! Wait phone call from our consult!')); 
  endif;  
}

/** Form only one element. Submit. Send order to recipient */
function order_send_form($form_state, $arg1) {
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Send Order'),
    '#attributes' => array('id' => 'order_submit'),
  ); 
  return $form;
}

function order_send_form_submit($form_state, $arg1) {
  $cid = $arg1['build_info']['args'][0];
  $result = db_update('order_t')
    ->fields(array('state' => 1))
  ->condition('ordid', $cid)
  ->execute();
  drupal_set_message(t('This order was sent to recipients!'));
}

/** Form only one element. Submit. Cancel order */
function order_canceled_form($form_state, $arg1) {
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Cancel Order'),
    '#attributes' => array('id' => 'order_submit'),
  ); 
  return $form;
}

function order_canceled_form_submit($form_state, $arg1) {
  $cid = $arg1['build_info']['args'][0];
  $result = db_update('order_t')
    ->fields(array('state' => 3))
    ->condition('ordid', $cid)
    ->execute();
  drupal_set_message('This order was canceled!');
} 

/** Form only one element. Submit. Clear shopping card */
function clear_card_form() {
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Clear Shopping Card'),
    '#attributes' => array('id' => 'order_submit'),
  ); 
  return $form;
}

function clear_card_form_submit($form, &$form_state) {
  global $user;
  $uid = $user->uid;
  if (($uid != 0) && ($uid > 0)):
    $num_deleted = db_delete('card')
      ->condition('uid', $uid)
      ->condition('state', 0)
      ->execute();
  drupal_set_message(t('Your shopping card is empty!'));
  else:
  $huid = getHushUserId();
  $num_deleted = db_delete('card')
      ->condition('huid', $huid)
      ->condition('state', 0)
      ->execute();
  drupal_set_message(t('Your shopping card is empty!'));	  
  endif;
}
/* 
* Implements hook_ctools_plugin_directory -
* This lets ctools know to scan my module for a content_type plugin file
* Detailed docks in ctools/ctools.api.php 
*/ 
function handle_ctools_plugin_directory($owner, $plugin_type) {
  // we'll be nice and limit scandir() calls
  if ($owner == 'ctools' && $plugin_type == 'content_types') {
    return 'plugins/content_types';
  }
}

/* 
* Implements hook_permission. Permissions use in module 
*/
function handle_permission() {
  return array(
    'buy products' => array(
      'title' => t('How are buy products in the site'),
      'description' => t('All user may buy products.'),
    ),
	'administer buy products' => array(
	  'title' => t('How are administer buy products in the site'),
      'description' => t('Users ho my access to administer in module products.'), 
	),
	'auth' => array(
	  'title' => t('Authenticated user in my module'),
      'description' => t('Authenticated user in my module.'),
	),
  );
}

// function for generated hash code for anonymus user 
function generateCode($length=6) 
{
  $chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHI JKLMNOPRQSTUVWXYZ0123456789";
  $code = "";
  $clen = strlen($chars) - 1;
    while (strlen($code) < $length) {
      $code .= $chars[mt_rand(0,$clen)];
    }
return $code;
}

//function return user id anonymus user 
function getHushUserId() {

  if (!isset($_COOKIE['Drupal_visitor_key'])){
    $hash_code = generateCode(10);
    user_cookie_save(array('key'=>$hash_code));
    user_cookie_save(array('currency'=>1));
	  $hid = db_insert('hash_user')
      ->fields(array('user_hash' => $hash_code))
      ->execute(); 
    $hash_user = $hash_code;
    $huid = db_select('hash_user', 'hu')
      ->condition('hu.user_hash', $hash_user)
      ->fields('hu', array('huid'))
    ->execute()
      ->fetchField(); 
  }         
  elseif (isset($_COOKIE['Drupal_visitor_key'])) {		
    $hash_user = $_COOKIE['Drupal_visitor_key'];
    $huid = db_select('hash_user', 'hu')
      ->condition('hu.user_hash', $hash_user)
      ->fields('hu', array('huid'))
	  ->execute()
      ->fetchField();
  }  

  return $huid;
}

//function return count of shopping card
function getCountProductsInUser() {

  global $user;  
  $uid = $user->uid;

  if (($uid != 0) && ($uid > 0)):
    $query = db_select('card', 'c'); 
    $query->condition('c.uid', $uid);
    $query->condition('c.state', 0);
    $query->fields('c', array('nodeid'));
    $result = $query->execute();
    $count = $result->rowCount();
  else:
    $huid = getHushUserId();
    $query = db_select('card', 'c'); 
    $query->condition('c.huid', $huid);
    $query->condition('c.state', 0);
    $query->fields('c', array('nodeid'));
    $result = $query->execute();
    $count = $result->rowCount();	
  endif;
  
  return $count;  
}

